#!/usr/bin/env python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
# +------------------------------------------------------------------+
# |             ____ _               _        __  __ _  __           |
# |            / ___| |__   ___  ___| | __   |  \/  | |/ /           |
# |           | |   | '_ \ / _ \/ __| |/ /   | |\/| | ' /            |
# |           | |___| | | |  __/ (__|   <    | |  | | . \            |
# |            \____|_| |_|\___|\___|_|\_\___|_|  |_|_|\_\           |
# |                                                                  |
# | Copyright Mathias Kettner 2014             mk@mathias-kettner.de |
# +------------------------------------------------------------------+
#
# This file is part of Check_MK.
# The official homepage is at http://mathias-kettner.de/check_mk.
#
# check_mk is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.  check_mk is  distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# tails. You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.

# Written/Edited by Philipp NÃ¤ther
# philipp.naether@stadt-meissen.de

# 1:    ID             = spb_mm_0
      # SP             = spb
      # Slot           = 0
      # Name           = SP B Memory Module 0
      # Health state   = OK (5)
      # Health details = "The component is operating normally. No action is required."
      # Manufacturer   = Samsung
      # Model          = DDR4 SDRAM
      # Part number    = 100-564-192-00
      # Serial number  = 80AD01163881527BDE

# 2:    ID             = spb_mm_1
      # SP             = spb
      # Slot           = 1
      # Name           = SP B Memory Module 1
      # Health state   = OK (5)
      # Health details = "The component is operating normally. No action is required."
      # Manufacturer   = Samsung
      # Model          = DDR4 SDRAM
      # Part number    = 100-564-192-00
      # Serial number  = 80AD01163881527BE1

def inventory_emcunity_memory(info):
# parse info, no key needed for inventory
# "Name" is automatically added
    keys = [ "Name", "Serial number" ]
    mems = emcunity_parse_info(info, keys)
    for mem in mems:
        if mems[mem]["Serial number"] != "":
            item = mems[mem]["Name"]
            yield item, None

def check_emcunity_memory(item, params, info):
# parse info, just get data we want for this check by defining the keys
    keys = [ "Name", "Health state", "Health details", "Model" ]
    mems = emcunity_parse_info(info, keys)
    for mem in mems:
        name = mems[mem]["Name"]
        if name == item:
            hstate = mems[mem]["Health state"]
            hdetail = mems[mem]["Health details"]
            model = mems[mem]["Model"]
    return parse_emcstate(hstate), "%s, %s, Model: %s" % (hstate, hdetail, model)

check_info["emcunity_memory"] = {
    'check_function'         :    check_emcunity_memory,
    'inventory_function'     :    inventory_emcunity_memory,
    'service_description'    :    'HW',
    'includes'               :    [ 'emcunity.include' ],
}
